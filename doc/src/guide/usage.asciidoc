== Usage

Before `hnc` can be used to create and manage pools, the `hnc`
application must be started.

[source,erlang]
----
application:ensure_all_started(hnc).
----

=== Worker modules

Worker modules are modules implementing the `hnc_worker` behavior.
The behavior defines two callbacks.

[source,erlang]
----
start_link(Args) -> {ok, Worker}
----

`Args = term()`::
Worker start arguments, as given by the fourth parameter to `hnc:start_pool/4`.

`Worker = worker()`::
The pid of a worker started by this function, which must be linked to the
calling process.

This callback is mandatory.

[source,erlang]
----
get_modules() -> [module()]
----

This callback is optional.
If the module serves only as a proxy to start the "real" worker, ie the real
worker implementation resides in another module, this function must return the
module of the real worker modules, in a list, otherwise hot-code upgrading
the worker module will not work.

=== Starting a pool

[source,erlang]
----
{ok, _} = hnc:start_pool(PoolName, PoolOpts, WorkerModule, WorkerOpts).
----

`PoolName`::
A unique identifier for the pool, by which it will be addressed.

`PoolOpts`::
Pool configuration.

`WorkerModule`::
The worker module for this pool.

`WorkerOpts`::
The argument given to the worker module's `start_link/1` function
when a worker is started by this pool.

=== Stopping a pool

[source,erlang]
----
ok = hnc:stop_pool(PoolName).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

=== Pool operations

==== Checking out a worker

[source,erlang]
----
WorkerRef = hnc:checkout(PoolName, Timeout).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Timeout`::
The maximum time allowed for the checkout. This
argument is optional and defaults to `infinity`.

`WorkerRef`::
The identifier of a worker from the pool specified by `PoolName`.

The return value is a worker _identifier_ (to be used when checking
it back in, giving it away, or querying it's status). To get the actual
worker _pid_ to perform a task with, `hnc:get_worker(WorkerRef)` must be
used.

==== Checking in a worker

[source,erlang]
----
Result = hnc:checkin(WorkerRef, Timeout).
----

`WorkerRef`::
The identifier of the worker to be returned, as returned by `checkout/1,2`.

`Timeout`::
The maximum time allowed for the checkin. This argument
is optional and defaults to `infinity`.

`Result`::
The result of the checkin operation, either `ok` on success, or `{error, not_owner}`
if the process doing the checkin is not the current owner of the worker.

==== Transactions

Transactions wrap checking out, performing some work with, and checking
back in of workers.

Note that the argument given to the transaction function is a worker _pid_,
not a worker _identifier_. Thus, it is not possible to return or give away
the worker from the transation function.

[source,erlang]
----
Result = hnc:transaction(PoolName, Fun, Timeout).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Fun`::
The transaction function, taking a worker from the pool
as the single argument.

`Timeout`::
The maximum time allowed for the checkout (_not_ the entire
transaction). This argument is optional and defaults to `infinity`.

`Result`::
The result of the transaction, as returned by the transaction function.

==== Giving away a worker to another process

Usually, the pool monitors the process that checked out a worker and automatically
checks it back in when this process dies, making it available to be checked out by
another process.

If the worker was checked out in order to be used by another process, it should
be given away to that other process. The pool will then monitor the other process,
and the worker will not be checked in when the original process dies.

The process calling this function must be the current owner of the worker.

The process receiving the worker is sent a message `{'HNC-WORKER-TRANSFER', WorkerRef, FromPid, GiftData}`.

[source,erlang]
----
Result = hnc:give_away(WorkerRef, OtherProcess, GiftData).
Result = hnc:give_away(WorkerRef, OtherProcess, GiftData, Timeout).
----

`WorkerRef`::
The identifier of the worker to be given away, as returned by `checkout/1,2`.

`OtherProcess`::
The other process to give the worker to.

`GiftData`::
Arbitrary term to send along with the transfer message.

`Timeout`::
The maximum time allowed for the worker transfer operation.

`Result`::
The result of the operation, either `ok` on success, or `{error, not_owner}`
if the process calling this function is not the current owner of the worker.

=== Runtime configuration

==== Getting the current strategy of a pool

[source,erlang]
----
Strategy = hnc:get_strategy(PoolName, Timeout).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Timeout`::
The maximum time allowed to fetch the pool strategy. This
argument is optional and defaults to `5000`.

`Strategy`::
The current pool strategy, either `fifo` or `lifo`.

==== Setting a new pool strategy

[source,erlang]
----
ok = hnc:set_strategy(PoolName, Strategy).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Strategy`::
The new pool strategy, either `fifo` or `lifo`.

==== Getting the current pool size

[source,erlang]
----
Size = hnc:get_size(PoolName, Timeout).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Timeout`::
The maximum time allowed to fetch the pool size. This
argument is optional and defaults to `5000`.

`Size`::
The current pool size.

==== Setting a new pool size

[source,erlang]
----
ok = hnc:set_size(PoolName, Size).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Strategy`::
The new pool size.

Changing the pool size has no immediate effect, ie no
workers will be started or stopped. Instead, the number
of hosted workers will converge on the new settings as
pool operations happen.

==== Getting the current linger

[source,erlang]
----
Linger = hnc:get_linger(PoolName, Timeout).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Timeout`::
The maximum time allowed to fetch the pool linger. This
argument is optional and defaults to `5000`.

`Linger`::
The current pool linger.

==== Setting a new pool linger

[source,erlang]
----
ok = hnc:set_linger(PoolName, Linger).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Linger`::
The new pool linger.

==== Pruning a pool

[source,erlang]
----
ok = hnc:prune(PoolName).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

Pruning the pool stops all idle workers, but makes sure that at least
the minimum number of workers, as specified by the `size` option,
remains in the pool.

=== Querying status

==== Worker status

[source,erlang]
----
WorkerStatus = hnc:worker_status(WorkerRef, Timeout).
----

`WorkerRef`::
The identifier of the worker whose status to retrieve, as returned by `checkout/1,2`.

`Timeout`::
The maximum time allowed to fetch the status. This
argument is optional and defaults to `5000`.

`WorkerStatus`::
The current status of the worker, either `idle`,
`out`, or `returning`. If the given worker is not
known to the pool, `undefined` is returned.

==== Pool status

[source,erlang]
----
PoolStatus = hnc:pool_status(PoolName, Timeout).
----

`PoolName`::
The pool identifier, as given in `start_pool/4`.

`Timeout`::
The maximum time allowed to fetch the status. This
argument is optional and defaults to `5000`.

`PoolStatus`::
The current status of the pool, as a map.
